#!/usr/bin/env node
var io = require('socket.io');

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatroom:server');
var http = require('http');
var mongoose = require('mongoose');

/* initial mongoose */
mongoose.connect('mongodb://localhost/chatroom:server', function(err) {
    if(err) {
        console.log('mongodb connection error', err);
    } else {
        console.log('mongodb connection successful');
    }
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var msgText;
var user_input = {username:"", input_text:""};
console.log(msgText);

//console.log(pos);

io = io.listen(server);
io.on('connection', function(socket){
  console.log('User connected. Socket id %s', socket.id);
  io.emit('update', msgText);

  socket.on('disconnect', function(){
    console.log('User disconnected. Socket id %s', socket.id);
  });

  // socket.on('update', function(_msgText){
  //   msgText = _msgText;
  //   io.emit('update', msgText); 
  // });

  socket.on('chat' , function(_user_input){
    user_input = _user_input;
    io.emit('chat', user_input);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
